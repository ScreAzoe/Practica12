import pickle, random
lista=[]
for i in range(550):
    lista.append(random.sample(range(0, 1000), 2))
file= open('datos.p', 'wb')
pickle.dump(lista, file)
file.close()
print(lista)

def insertionSort(n_lista):
    for index in range(1,len(n_lista)):
        actual = n_lista[index]
        actual_y=actual[1]
        actual_x=actual[0]
        posicion = index
        while posicion>0 and n_lista[posicion-1][1]>actual_y or (n_lista[posicion-1][1]==actual_y and n_lista[posicion-1][0]>actual_x):
            n_lista[posicion]=n_lista[posicion-1]
            posicion = posicion-1           
        n_lista[posicion]=actual
    return n_lista

file= open('datos.p', 'rb')
lista_cargada= pickle.load(file)
file.close()
lista_sort= insertionSort(lista_cargada)
file= open('datos_insertion.p', 'wb')
pickle.dump(lista_sort, file)
file.close()
print(lista_sort)

def quicksort(lista):
    quicksort_aux(lista,0,len(lista)-1)

def quicksort_aux(lista,inicio, fin):
    if inicio < fin:

        pivote = particion(lista,inicio,fin)

        quicksort_aux(lista, inicio, pivote-1)
        quicksort_aux(lista, pivote+1, fin)

def particion(lista, inicio, fin):
    #Se asigna como pivote en número de la primera localidad
    pivote = lista[inicio]
    #print("Valor del pivote {}".format(pivote))
    #Se crean dos marcadores 
    izquierda = inicio+1
    derecha = fin
    #print("Índice izquierdo {}".format(izquierda))
   # print("Índice derecho {}".format(derecha))

    
    bandera = False
    while not bandera:
        while izquierda <= derecha and lista[izquierda][1] < pivote[1] or (izquierda<= derecha and lista[izquierda][1]== pivote[1] and lista[izquierda][0]<pivote[0]):
            izquierda = izquierda + 1
        while lista[derecha][1] > pivote[1] and derecha >=izquierda or (lista[derecha][1]== pivote[1] and derecha >=izquierda and lista[derecha][0]>pivote[0]):
            derecha = derecha -1
        if derecha < izquierda:
            bandera= True
        else:
            temp=lista[izquierda]
            lista[izquierda]=lista[derecha]
            lista[derecha]=temp
            
   # print(lista)


    temp=lista[inicio]
    lista[inicio]=lista[derecha]
    lista[derecha]=temp
    return derecha

lista_quick= lista_cargada
quicksort(lista_quick)
print(lista_quick)
